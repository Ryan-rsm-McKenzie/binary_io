name: Main CI

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/main_ci.yml'
      - 'cmake/**'
      - 'include/**'
      - 'src/**'
      - 'tests/**'
      - 'CMakeLists.txt'
      - 'CMakePresets.json'
      - 'vcpkg.json'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: Debug
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg-cache

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [ gcc, clang ]
        include:
          - compiler: gcc
            version: '10'
          - compiler: clang
            version: '13'

    steps:
      - uses: actions/checkout@v2
        with:
          path: binary_io

      - name: Set up GCC
        if: ${{ matrix.compiler == 'gcc' }}
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ matrix.version }}

      - name: Set up Clang
        if: ${{ matrix.compiler == 'clang' }}
        uses: egor-tensin/setup-clang@v1
        with:
          version: ${{ matrix.version }}

      - name: Setup Environment
        run: |
          wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
          unzip ninja-linux.zip
          sudo mv ninja /usr/local/bin

      - name: Download Catch2
        uses: actions/checkout@v2
        with:
          ref: v2.13.6
          repository: catchorg/Catch2
          path: catch2

      - name: Install Catch2
        working-directory: ${{ github.workspace }}/catch2
        run: |
          cmake -B build -S . -G Ninja -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCATCH_BUILD_TESTING=OFF -DCATCH_ENABLE_WERROR=OFF -DCATCH_INSTALL_DOCS=OFF
          cmake --build build
          sudo cmake --install build

      - name: Configure CMake
        working-directory: ${{ github.workspace }}/binary_io
        run: cmake --preset ninja-linux-apt -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Build
        working-directory: ${{ github.workspace }}/binary_io
        run: cmake --build build

      - name: Test
        working-directory: ${{ github.workspace }}/binary_io/build
        run: ctest -C ${{ env.BUILD_TYPE }} -V

      - name: Collect code coverage
        if: ${{ matrix.compiler == 'gcc' }}
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
          working-directory: ${{ github.workspace }}/binary_io/build

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: binary_io

      - name: Setup vcpkg
        run: |
          mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          cd $env:VCPKG_INSTALLATION_ROOT
          ./bootstrap-vcpkg.bat
          ./vcpkg --version > ${{ github.workspace }}/vcpkg-version.txt

      - name: Cache vcpkg
        uses: actions/cache@v2
        id: vcpkg-cache
        env:
          cache-name: vcpkg-cache
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('binary_io/**/vcpkg.json', 'vcpkg-version.txt') }}

      - name: Configure CMake
        working-directory: ${{ github.workspace }}/binary_io
        run: cmake --preset vs2019-windows-vcpkg

      - name: Build
        working-directory: ${{ github.workspace }}/binary_io
        run: cmake --build build --config ${{ env.BUILD_TYPE }}

      - name: Test
        working-directory: ${{ github.workspace }}/binary_io/build
        run: ctest -C ${{ env.BUILD_TYPE }} -V
